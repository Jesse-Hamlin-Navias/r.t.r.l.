-- title:  R.T.R.L
-- author: Jesse Hamlin-Navias
-- desc:   A real time rogue like
-- script: lua
version="alpha 0.73"

p,spawn,enemies,max,bar,bar2,turns,selector,knife,mode=nil

state='menu'
renderbol = true

function reset_game()
			p={x=0,y=0}
			spawn={x=0,y=0}
			--u,d,l,r is directional state. 0 is no flag, 1 is flag
			enemies={{x=0,y=0,s={0,0,0,0},x2=0,y2=0,h=3}}
			--enemies={{x=80,y=40,s={0,0,0,0},x2=0,y2=0}}
			max=100
			bar=max
			bar2=0
			turns=0
			selector=1
			mode='move'
			knife={x,y,d='hold'}
			generate()
end

function generate()
   --2,3 to 26,13
			---clears map
			for i=2,27,2 do
			   for j=3,14,2 do
						   mset(i,j,33)   mset(i+1,j,34)
									mset(i,j+1,49) mset(i+1,j+1,50)
						end
			end
			---generates walls
			for i=1,14 do
			   x=(math.random(1,13))*2
			   y=(math.random(1,6))*2+1
						if mget(x,y)~=3 then
						   mset(x,y,3)    mset(x+1,y,4)
									mset(x,y+1,19) mset(x+1,y+1,20)
						end
			end
			---generates enemies
			for e,v in pairs(enemies) do
			   v.x=0
						v.y=0
			end
			for e,v in pairs(enemies) do
			   x=(math.random(1,13))*2
			   y=(math.random(1,6))*2+1
						while mget(x,y)==3 or not spr_collide(e,x*8,y*8) do
						   x=(math.random(1,13))*2
			      y=(math.random(1,6))*2+1
						end
						v.x=x*8
						v.y=y*8
			end
			---generate player
   x=(math.random(1,13))*2
   y=(math.random(1,6))*2+1
			while mget(x,y)==3 or not spr_collide(p,x*8,y*8) do
			   x=(math.random(1,13))*2
      y=(math.random(1,6))*2+1
			end
			p.x=x*8
			p.y=y*8
			--generate spawner
			x=(math.random(1,13))*2
   y=(math.random(1,6))*2+1
			while mget(x,y)==3 do
			   x=(math.random(1,13))*2
      y=(math.random(1,6))*2+1
			end
			mset(x,y,7)    mset(x+1,y,8)
			mset(x,y+1,23) mset(x+1,y+1,24)
			spawn.x=x*8
			spawn.y=y*8
end

function rebar()
			if bar2>-9 or bar<(max//20) then
			   bar=bar+(max//(10/3))
			else
			   bar=bar+(max//5)
			end
			if bar>max then bar=max end
			bar2=6
end

function dget(x,y)
 return mget(x/8,y/8)
end

function spr_collide(e,x,y)
 for k, v in pairs(enemies) do
	   if k~=e and v.x==x and v.y==y then
				   return false
				end
	end
	return true
end

function spr_plan(e,x,y)
 for k, v in pairs(enemies) do
	   if k~=e and v.x2==x and v.y2==y then
				   return false
				end
	end
	return true
end

function enemy_plan(e)
 local ex = enemies[e].x
	local ey = enemies[e].y
	--local s1 = enemies[e].s
	local s2 = {enemies[e].s[1],enemies[e].s[2],
	            enemies[e].s[3],enemies[e].s[4]}
	local fail = 0
 local hor = ex-p.x
	local ver = ey-p.y
	local distance = math.sqrt(hor^2+ver^2)
	local order={}
	
	local function dir_check(xc,yc,fird,secd,thid,foud)
	   if s2[fird]+s2[secd]+s2[thid]+s2[foud]==4 then
				   for k,v in pairs(s2) do
							   s2[k]=0
							end
				end
	   if dget(ex+xc,ey+yc)~=3 and spr_plan(e,ex+xc,ey+yc) then
				   if s2[fird]==0 or fail==3 then
										enemies[e].x2=ex+xc
										enemies[e].y2=ey+yc
										if fail>0 then
											  s2[thid]=0
										   s2[foud]=0
										   s2[secd]=1
										elseif fail<1 then
										   s2[secd]=0
										end
										return true
							else
										fail=fail+1
										return false
							end
				else
				   s2[fird]=1
				   fail=fail+1
				   return false
				end
	end

 local function distrib(orientation,a,b,funka,funkb)
	 if orientation<0 then
					order[a]= funka
					order[b]= funkb
		elseif orientation>0 then
		   order[a]= funkb
					order[b]= funka
		elseif math.random()<0.5	then
		   order[a]= funka
					order[b]= funkb
		else 
		   order[a]= funkb
					order[b]= funka  
		end
	end
							
	if distance < 200 then
	   if math.abs(hor) >= math.abs(ver)
				   and math.abs(hor)~=0 then
				   distrib(hor,1,4,{16,0,3,4,1,2},{-16,0,4,3,1,2})
							distrib(ver,2,3,{0,16,2,1,3,4},{0,-16,1,2,3,4})
				elseif math.abs(hor) < math.abs(ver)
				   and math.abs(ver)~=0 then
				   distrib(ver,1,4,{0,16,2,1,3,4},{0,-16,1,2,3,4})
							distrib(hor,2,3,{16,0,3,4,1,2},{-16,0,4,3,1,2})		   	
				end
				if math.abs(hor)==math.abs(ver) then
				   if math.random()>0.5 then
							   local holder = order[1]
										order[1] = order[2]
										order[2] = holder
							end
				end
				for i=1, 4  do
							if dir_check(order[i][1],order[i][2],
							             order[i][3],order[i][4],
																				order[i][5],order[i][6]) then
							   break
							end
				end
				enemies[e].s=s2
 end
end

	
function enemy_move(e)
	  enemies[e].x=enemies[e].x2 
			enemies[e].y=enemies[e].y2
end

function enemy_death(e)
			if knife.x==enemies[e].x and knife.y==enemies[e].y then
			   enemies[e].h=enemies[e].h-1
			end
			if enemies[e].h<1 then
			   table.remove(enemies, e)
			end
end

function spawn_enemy(n)
   table.insert(enemies,n+1,{x=0,y=0,s={0,0,0,0},x2=0,y2=0,h=3})
			enemies[n+1].x=spawn.x
			enemies[n+1].y=spawn.y
end

function knife_move()
			if knife.d=='up' then
			   if dget(knife.x,knife.y-16)==3 then
						   knife.d='hit'
						else knife.y=knife.y-16 end
			elseif knife.d=='down' then
			   if dget(knife.x,knife.y+16)==3 then
						   knife.d='hit'
						else knife.y=knife.y+16 end
			elseif knife.d=='left' then
			   if dget(knife.x-16,knife.y)==3 then
						   knife.d='hit'
						else knife.x=knife.x-16 end
			elseif knife.d=='right' then
			   if dget(knife.x+16,knife.y)==3 then
						   knife.d='hit'
						else knife.x=knife.x+16 end
			end
end
	
function move()
 local function inc()
				turns=turns+1
   --math.sqrt((enemies[e].x-p.x)^2+(enemies[e].y-p.y)^2)
				--table.sort(enemies,
				--           function(e1,e2)
				--											   return math.sqrt((e1.x-p.x)^2+(e1.y-p.y)^2)
				--														<=math.sqrt((e2.x-p.x)^2+(e2.y-p.y)^2) end)
				if turns%2==0 then
				   for k, v in pairs(enemies) do
							   enemy_move(k)
										enemy_death(k)
							end
			 else
				   for k, v in pairs(enemies) do
							   enemy_plan(k)
										enemy_death(k)
							end
				end
				if turns%32==0 then
				   spawn_enemy(#enemies)
				end
				knife_move()
				if p.x==knife.x and p.y==knife.y then
				   knife.d='hold'
				end
				for k, v in pairs(enemies) do
										enemy_death(k)
							end
				rebar()
				renderbol = true
				sfx(0, 'E-5', 10, 0, math.random(1,7))
	end
	
	if mode=='knife' then
	 if btnp(0) and mget(p.x/8,(p.y-16)/8)~=3 then
		   knife.y=p.y
					knife.x=p.x
					knife.d='up'
					inc()
					mode='move'
		end
		if btnp(1) and mget(p.x/8,(p.y+16)/8)~=3 then
					knife.y=p.y
					knife.x=p.x
					knife.d='down'
					inc()
					mode='move'
		end
		if btnp(2) and mget((p.x-16)/8,p.y/8)~=3 then  
					knife.y=p.y
					knife.x=p.x
					knife.d='left'
					inc()
					mode='move'
		end
		if btnp(3) and mget((p.x+16)/8,p.y/8)~=3 then 
					knife.y=p.y
					knife.x=p.x
					knife.d='right'
					inc()
					mode='move'
		end
	elseif mode=='move' then
		if btnp(6) and knife.d=='hold' then
		   mode='knife'
					inc()
		end
		if btnp(0) and mget(p.x/8,(p.y-16)/8)~=3 then
		   p.y=p.y-16
					inc()
		end
		if btnp(1) and mget(p.x/8,(p.y+16)/8)~=3 then
					p.y=p.y+16
					inc()
		end
		if btnp(2) and mget((p.x-16)/8,p.y/8)~=3 then
					p.x=p.x-16
					inc()
		end
		if btnp(3) and mget((p.x+16)/8,p.y/8)~=3 then
					p.x=p.x+16
					inc()
		end
 end
	if not spr_collide(p,p.x,p.y) then state='death' end
end

function render_p()
			spr(1,p.x,p.y,14,1,0,0,2,2)
end

function render_enemies()
			for e, v in pairs(enemies) do
			   spr(35,v.x,v.y,14,1,0,0,2,2)
						-- 
						if v.y2<v.y then
						   spr(37,v.x+5,v.y-4,0,1,0,3)
						elseif v.y2>v.y then
						   spr(37,v.x+3,v.y+12,0,1,0,1)
						elseif v.x2>v.x then
						   spr(37,v.x+12,v.y+5,0,1,0)
						elseif v.x2<v.x then
						   spr(37,v.x-5,v.y+2,0,1,0,2)
						end
						if v.h==3 then
						   spr(39,v.x-2,v.y+8,0)
									spr(39,v.x+4,v.y+8,0)
									spr(39,v.x+10,v.y+8,0)
						elseif v.h==2 then
						   spr(39,v.x-2,v.y+8,0)
									spr(39,v.x+4,v.y+8,0)
									spr(40,v.x+10,v.y+8,0)
						elseif v.h==1 then
						   spr(39,v.x-2,v.y+8,0)
									spr(40,v.x+4,v.y+8,0)
									spr(40,v.x+10,v.y+8,0)
						end
			end
			if turns%32==28 then
			   circ(spawn.x+8,spawn.y+8,2,2)
			elseif turns%32==29 then
			   circ(spawn.x+8,spawn.y+8,4,2)
			elseif turns%32==30 then
			   circ(spawn.x+8,spawn.y+8,6,2)
			elseif turns%32==31 then
			   circ(spawn.x+8,spawn.y+8,8,2)
			end
end

function render_bar()
		 if (time()/1000)%0.25 and bar>0 and bar2<=0 then
			   bar=bar-2
			elseif (time()/1000)%0.2 then
			   bar2=bar2-1
			end
   -------			
			if bar>0 then
			   rect(10,8,(bar/max)*60,8,2)
			end	
			spr(6,8,4,0,2,1)
			spr(5,24,4,0,2)
			spr(5,40,4,0,2)
			spr(6,56,4,0,2)
end

function render_knife()
   if knife.d=='hit' then
			   spr(38,knife.x+4,knife.y+4,0)
			elseif knife.d=='up' then
			   spr(53,knife.x+4,knife.y+4,0,1,0,3)
			elseif knife.d=='down' then
			   spr(53,knife.x+4,knife.y+4,0,1,0,1)
			elseif knife.d=='left' then
			   spr(53,knife.x+4,knife.y+4,0,1,1)
			elseif knife.d=='right' then
			   spr(53,knife.x+4,knife.y+4,0)
			end
end

function menu()
   print("R.T.R.L.", 40, 40, 5,false,5)
			print("real.time.rogue.like.",60,70,14,true,1)
			print("version "..version,0,130,15,fasle,1,true)
			if selector==1 then
			   print("Play",63,85,13,false,2)
						print("Z",113,89,15,false,1)
			   print("Controls",60,100,14,false,1)
						if btnp(4) then
						   reset_game()
									state='play'
						end
		 elseif selector==2 then
			   print("Play",60,90,14,false,1)
			   print("Controls",62,99,13,false,2)
						print("Z",160,102,15,false,1)
						if btnp(4) then state='controls' end
		 end
			if btnp(0) and selector==2 then
			   selector=1
			elseif btnp(1) and selector==1 then
			   selector=2
			end	
end

function play()
   if bar<1 then state='death' end
			map(0,0,30,17,0,0)
			move()
			render_p()
			render_enemies()
			render_bar()
			render_knife()
			print("Turns: "..turns,170,0,12)
end

function death()
   print("You Died!",10,50, 2,false,5)
			print("Turns: "..turns,96,79,12)
			if selector==1 then
		   print("Play",63,85,13,false,2)
					print("Z",113,89,15,false,1)
		   print("Menu",60,100,14,false,1)
					if btnp(4) then
								reset_game()
								state='play'
				 end
	 elseif selector==2 then
		   print("Play",60,90,14,false,1)
		   print("Menu",62,99,13,false,2)
					print("Z",115,102,15,false,1)
					if btnp(4) then selector=1 state='menu' end
	 end
		if btnp(0) and selector==2 then
		   selector=1
		elseif btnp(1) and selector==1 then
		   selector=2
		end	
end

function controls()
   print("Controls:", 30, 40, 5,false,3)
			print("Arrow keys to move",30,70,14,true,1)
			print("Z to select",30,76,14,true,1)
			print("Don't let the timer run out."
			      .."\nDon't touch any enemies."
									.."\nSurvive for as many\nturns as possible"
									.."\nZ to return to menu",
			       30,82,14,true,1)
			print("version "..version,0,130,15,fasle,1,true)
			if btnp(4) then selector=1 state='menu' end
end

reset_game()
function TIC()
		
	cls(0)
	if state=='menu' then
		  menu()
	elseif state=='play' then
    play()
	elseif state=='controls' then
    controls()
	elseif state=='death' then
	   death()
	end
end
